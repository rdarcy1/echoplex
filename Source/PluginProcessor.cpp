/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
EchoplexAudioProcessor::EchoplexAudioProcessor()
{
}

EchoplexAudioProcessor::~EchoplexAudioProcessor()
{
}

//==============================================================================
const String EchoplexAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

const String EchoplexAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String EchoplexAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool EchoplexAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool EchoplexAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool EchoplexAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool EchoplexAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool EchoplexAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double EchoplexAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int EchoplexAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int EchoplexAudioProcessor::getCurrentProgram()
{
    return 0;
}

void EchoplexAudioProcessor::setCurrentProgram (int index)
{
}

const String EchoplexAudioProcessor::getProgramName (int index)
{
    return String();
}

void EchoplexAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void EchoplexAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
    
    try
    {
        // Create a ring buffer for each input channel
        int input_chans = getNumInputChannels();
        ringBuf = new RingBuffer[input_chans];
        
        for (int channel = 0; channel < input_chans; ++channel)
        {
            ringBuf[channel] = *ringbuffer_create(10000);
        }
    }
    catch (...)
    {
        NativeMessageBox::showMessageBox (AlertWindow::AlertIconType::WarningIcon, "Title", "Error");
    }
}

void EchoplexAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
    
//    ringbuffer_destroy(ringBuf);
    
    delete[] ringBuf;
}

void EchoplexAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    int delayed_sample_idx;
    double delayed_sample;
    double current_sample;
    int delay_in_samples = 9999;
    

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    for (int channel = 0; channel < getNumInputChannels(); ++channel)
    {
        mix = 1;
        for (int frame = 0; frame < buffer.getNumSamples(); ++frame)
        {
            float* channelData = buffer.getWritePointer (channel);

            // ..do something to the data...
            // Read the delayed sampled from the circular buffer
            delayed_sample_idx = mod ((ringBuf[channel].current_index)-delay_in_samples,ringBuf[channel].length);
            delayed_sample = (ringBuf[channel].buffer)[delayed_sample_idx];
            
            
            // Write the current sample into the circular buffer
            current_sample = channelData[frame];
            (ringBuf[channel].buffer)[ringBuf[channel].current_index] = current_sample;
            
            // Calculate the output sample value
            channelData[frame] = 0.5 * (current_sample + (mix*delayed_sample));
            
            // Increment the circular buffer index
            ringBuf[channel].current_index = ((ringBuf[channel].current_index)+1)%ringBuf[channel].length;
        }
    }
}

//==============================================================================
bool EchoplexAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* EchoplexAudioProcessor::createEditor()
{
    return new EchoplexAudioProcessorEditor (*this);
}

//==============================================================================
void EchoplexAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void EchoplexAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

int EchoplexAudioProcessor::mod(int a, int b)
{
    int r = a%b;
    return (r<0 ? r+b : r);
}

// Create new ring buffer
EchoplexAudioProcessor::RingBuffer* EchoplexAudioProcessor::ringbuffer_create(int length)
{
        // Allocate memory for struct
        RingBuffer *new_buffer = new EchoplexAudioProcessor::RingBuffer;
        new_buffer->length  = length;
        
        // Allocate memory for buffer array
        new_buffer->buffer = new float[new_buffer->length];

        new_buffer->current_index = 0;
        
        return new_buffer;
}

void EchoplexAudioProcessor::ringbuffer_destroy(RingBuffer *buffer_to_destroy)
{
    delete[] buffer_to_destroy->buffer;
    delete[] buffer_to_destroy;
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new EchoplexAudioProcessor();
}
